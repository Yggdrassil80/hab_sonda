#!/usr/bin/python

import ConfigParser
import logging
import serial
import time
import sys

#Creacion del logger para los logs de aplicacion
loggerLog = logging.getLogger('server_logger_gps')
loggerLog.setLevel(logging.INFO)
inf = logging.FileHandler('/data/chuteless/logs/wsp-GPS.log')
inf.setLevel(logging.INFO)
formatterInformer = logging.Formatter('[%(asctime)s][%(levelname)s][%(message)s]', datefmt='%Y-%m-%d %H:%M:%S')
inf.setFormatter(formatterInformer)
loggerLog.addHandler(inf)


#Metodo que devuelve la altura del objeto gpsData
def getAltura(gpsData):
	loggerLog.info("[GPSHelper][getAltura] Inicio/Fin")
	return float(gpsData[0])

#Metodo que devuelve la precion actual en metros de la altura marcada por el GPS
def calcularPrecisionHActual():
        #aqui hay que recuperar la altura de verdad del GPS
        precisionH=float(0.9)
        return precisionH

#Metodo que devuelve la precion actual como decimal de las coordenadas del GPS
def calcularPrecisionPActual():
        #Aqui hay que devolver la precision de verdad del GPS (revisar 2 coordenadas, aqui sol$
        precisionP=float(0.049)
        return precisionP

#Metodo que recupera los datos basicos de posicion y altura del GPS
def parseGPS_RMC(port):

	gpsData = [float(0), float(0), float(0), "", "", "", "KO"]

	try:
                loggerLog.info("[GPSHelper][parseGPS_RMC] Inicio")
		#$GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,003.1,W*6A
		#     RMC          Recommended Minimum sentence C
		# 1    123519       Fix taken at 12:35:19 UTC
     		# 2    A            Status A=active or V=Void.
     		# 3,4    4807.038,N   Latitude 48 deg 07.038' N
     		# 5,6    01131.000,E  Longitude 11 deg 31.000' E
     		# 7    022.4        Speed over the ground in knots
     		# 8    084.4        Track angle in degrees True
     		# 9    230394       Date - 23rd of March 1994
     		# 10,11    003.1,W      Magnetic Variation
     		# 12    *6A          The checksum data, always begins with 

                if  data[0:6] == "$GPRMC":
                        loggerLog.debug("[GPSHelper][parseGPS_RMC] Mensaje $GPRMC encontrado")
                        s = data.split(",")
                        if ((s[1] == '') or (s[3] == '') or (s[4] == '') or (s[5] == '') or (s[6] == '') or (s[7] == '') or (s[9] == '')):
                                loggerLog.debug("[GPSHelper][gpsDataExtendet] Datos insufucientes para componer traza")
                                return

                        loggerLog.debug("[GPSHelper][parseGPS_RMC] Datos validos. Recuperando...")
                        time = s[1][0:2] + ":" + s[1][2:4] + ":" + s[1][4:6]
                        lat = decode(s[3])
                        dirLat = s[4]
                        lon = decode(s[5])
                        dirLon = s[6]

			if dirlon == 'W':
				lon = lon * -1

                        speed = s[7]
                        date = s[9][0:2] + "-" + s[9][2:4] + "-" + s[9][4:6]
                        gpsDataExtendet[1] = lat
                        gpsDataExtendet[2] = lon
			gpsDataExtendet[3] = time
			gpsDataExtendet[4] = date
			gpsDataExtendet[5] = speed
                        gpsDataExtendet[6] = "OK"
                else:
                        loggerLog.debug("[GPSHelper][parseGPS_RMC] Mensaje $GPRMC NO encontrado. Salir con KO")
                        gpsData[0] = float(0)
                        gpsData[1] = float(0)
                        gpsData[2] = float(0)
			gpsData[3] = ""
			gpsData[4] = ""
			gpsData[5] = ""
                        gpsData[6] = "KO"

                loggerLog.debug("[GPSHelper][parseGPS_RMC] Fin [0: " + str(gpsData[0]) + "][1: " + str(gpsData[1]) + "][2:" + str(gpsData[2]) + " ][3:" + str(gpsData[3]) + "][4:" + time + "][5:" + date + "][6:" + speed)

                return gpsDataExtendet
        except Exception:
                e = sys.exc_info()[1]
                print(e.args[0])
                loggerLog.error("[GPSHelper][parseGPS] ERROR se retorna objeto invalido: " + e.args[0])
                return gpsDataExtendet


#metodo que se encarga de parsear los datos brutos de la mensajeria NMEA entrante por puerto serie basado en mensaje GPGGA
def parseGPS(data):

	gpsData = [float(0), float(0), float(0), "KO"]

	try:
		loggerLog.info("[GPSHelper][parseGPS] Inicio")
		# $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
		#     GGA          Global Positioning System Fix Data
		#     123519       Fix taken at 12:35:19 UTC
		#     4807.038,N   Latitude 48 deg 07.038' N
		#     01131.000,E  Longitude 11 deg 31.000' E
		#     1            Fix quality: 0 = invalid
                #               1 = GPS fix (SPS)
                #               2 = DGPS fix
                #               3 = PPS fix
		#	       4 = Real Time Kinematic
		#	       5 = Float RTK
                #               6 = estimated (dead reckoning) (2.3 feature)
		#	       7 = Manual input mode
		#	       8 = Simulation mode
		#     08           Number of satellites being tracked
		#     0.9          Horizontal dilution of position
		#     545.4,M      Altitude, Meters, above mean sea level
		#     46.9,M       Height of geoid (mean sea level) above WGS84
		#                      ellipsoid
		#     (empty field) time in seconds since last DGPS update
		#     (empty field) DGPS station ID number
		#     *47          the checksum data, always begins with *

		if  data[0:6] == "$GPGGA":
			loggerLog.debug("[GPSHelper][parseGPS] Mensaje $GPGGA encontrado")
        		s = data.split(",")
        		if s[7] == '0':
				loggerLog.debug("[GPSHelper][parseGPS] No hay satelites disponibles.")
           			return

			loggerLog.debug("[GPSHelper][parseGPS] Satelites disponibles. Detectando campos vacios...")
			loggerLog.debug("[GPSHelper][parseGPS] s2:" + s[2] + "s4:" + s[4] + "s9:" + s[9])
        	
			if ((s[2] == '') and (s[4] == '') and (s[9] == '')):
			
				loggerLog.debug("[GPSHelper][parseGPS] Campos vacios... devolvemos un KO")
				gpsData[0] = float(0)
	                	gpsData[1] = float(0)
        	        	gpsData[2] = float(0)
                		gpsData[3] = "KO"
			
				return gpsData
			
			loggerLog.debug("[GPSHelper][parseGPS] Datos validos. Recuperando...")
			time = s[1][0:2] + ":" + s[1][2:4] + ":" + s[1][4:6]
        		lat = decode(s[2])
        		dirLat = s[3]
        		lon = decode(s[4])
        		dirLon = s[5]
        		alt = s[9]
        		sat = s[7] 
			gpsData[0] = alt
			gpsData[1] = lat
			gpsData[2] = lon
			gpsData[3] = "OK"
		else:
			loggerLog.debug("[GPSHelper][parseGPS] Mensaje $GPGGA NO encontrado. Salir con KO")
			gpsData[0] = float(0)
                	gpsData[1] = float(0)
                	gpsData[2] = float(0)
                	gpsData[3] = "KO"		

		loggerLog.debug("[GPSHelper][parseGPS] Fin [0: " + str(gpsData[0]) + "][1: " + str(gpsData[1]) + "][2:" + str(gpsData[2]) + " ][3:" + str(gpsData[3]) + " ]")

		return gpsData
	except Exception:
		e = sys.exc_info()[1]
    		print(e.args[0])
		loggerLog.error("[GPSHelper][parseGPS] ERROR se retorna objeto invalido: " + e.args[0])
                return gpsData

#Metodo que transforma el formato de la coordenada
def decode(coord):
    # DDDMM.MMMMM -> XX.XXXXXXXX
	
	try:
		loggerLog.info("[GPSHelper][decode] Inicio")	
		coordenada = float(0)

		if coord != '':
			#print("[decode][cood: " + coord + "]")
			v = coord.split(".")
    			head = v[0]
    			tail =  v[1]
    			deg = head[0:-2]
    			min = head[-2:]

			resto = float(str(min)+"."+str(tail))
			#print("resto:"+str(resto))
			grados = float(str(deg))
			#print("grados:"+str(grados))
			restoConv = resto / 60
			#print("resto:"+str(restoConv))
			coordenada = grados + restoConv
			#print("coordenada:"+str(coordenada))
		else:
			coordenada = float(0)

		loggerLog.info("[GPSHelper][decode] Fin")
    		return coordenada
	except Exception:
		e = sys.exc_info()[1]
                print(e.args[0])
		loggerLog.error("[GPSHelper][decode] ERROR se retorna coordenada a 0: " + e.args[0])
        	return coordenada




